% Implementation of the Cubli-Corner Balancing according to the CDC-Article
% Author: Michael Muehlebach

% IMPORTANT: Note that the controller is implemented as in the CDC-Article. 
% It is therefore not the newest version!

clear all;
close all;

format long e; format compact;

%% initialization script
init;

u0 = zeros(nodes,3);

options = optimoptions('fminunc','GradObj','on','Algorithm','q',...
                        'Display','iter-detailed');
retval = fminunc(@bfgs,u0,options)

% retval = [
%      1.519854487377346e-01     5.933409616753225e-02    -2.204035655643797e-01
%     -4.245098781493811e-02    -1.843523217183797e-02     6.248743742205248e-02
%     -1.435951371076760e-02    -5.365903760462610e-03     2.130065010129749e-02
%     -9.786069870747899e-04    -1.115875685533477e-03     2.026637262564619e-03
%     -3.897955733008403e-03    -2.401882336062211e-03     5.958869844284784e-03
%      1.585938889367582e-03    -1.955914688350048e-04    -7.569405110327086e-04
%      9.727755550891439e-04    -6.256683814106327e-04    -1.128781727988714e-03
%     -3.142833012930509e-03    -1.422398932569449e-03     5.180820496037724e-03
%     -3.490508102138058e-04     4.357867595089072e-04    -2.031578371978118e-04
%     -3.420180098345104e-03     1.640850325111457e-03     2.143254387702673e-03];
 
% simulation
[t,x,psi,gradient] = rk4(@rhs,@rhs_sprzezone,x0,time,sample_time,Theta_0_ht,m,retval,nodes);

% Extract data
PIK=x(:,10:13);
pwh=x(:,4:6);
pww=x(:,7:9);

% express m-vector in inertial coordinate frame
I_m=zeros(length(t),3);
I_pwh=zeros(length(t),3);

for k=1:length(t)
    A_IKtmp=eye(3)+2*PIK(k,1)*Skew(PIK(k,2:4))+2*Skew(PIK(k,2:4))^2;
    I_m(k,:)=(A_IKtmp*m)';
    I_pwh(k,:)=(A_IKtmp*(pwh(k,:)'))';
end

% calculate inclination angle
figure(1)
hold all;
plot(t,acos(I_m(:,1)/norm(m))/pi*180);
xlabel('time [s]')
ylabel('inclination angle [deg]')
figure(2)
hold all;
plot(t,acos(I_m(:,2)/norm(m))/pi*180);
xlabel('time [s]')
ylabel('inclination angle [deg]')
figure(3)
hold all;
plot(t,acos(I_m(:,3)/norm(m))/pi*180);
xlabel('time [s]')
ylabel('inclination angle [deg]')
% body angulr velocity
wh=(pwh-pww)*Theta_0_ht^-1;

% wheel velocity
ww=pww*Theta_w^-1-wh;

figure(4)
plot(t,wh)
ylabel('\omega_h [rad/s]')
xlabel('time [s]')

% figure
% plot(t,ww/(2*pi)*60)
% ylabel('\omega_w [rpm]')
% xlabel('time [s]')

quality_indicator = x(:,14);
figure(5);
plot(t,quality_indicator);
